{"version":3,"sources":["components/Header.js","components/Home.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Header","Nav","Logo","src","NavMenu","alt","UserImg","styled","nav","img","div","Home","Container","main","App","className","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAuCeA,I,EAAAA,EAnCf,WACE,OACE,eAACC,EAAD,WACI,cAACC,EAAD,CAAMC,IAAI,qBACV,eAACC,EAAD,WACE,8BACE,qBAAKD,IAAI,wBAAwBE,IAAI,cACrC,2CAEF,8BACE,qBAAKF,IAAI,0BAA0BE,IAAI,gBACvC,6CAEF,8BACE,qBAAKF,IAAI,6BAA6BE,IAAI,mBAC1C,gDAEF,8BACE,qBAAKF,IAAI,4BAA4BE,IAAI,mBACzC,gDAEF,8BACE,qBAAKF,IAAI,yBAAyBE,IAAI,gBACtC,6CAEF,8BACE,qBAAKF,IAAI,0BAA0BE,IAAI,gBACvC,gDAGJ,cAACC,EAAD,CAASH,IAAI,wyBAOfF,EAAMM,IAAOC,IAAV,6IAOHN,EAAOK,IAAOE,IAAV,gDAIJL,EAAUG,IAAOG,IAAV,q6BA6CPJ,EAAUC,IAAOE,IAAV,0FCtFEE,MARf,WACI,OACI,cAACC,EAAD,KAQFA,EAAYL,IAAOM,KAAV,yYCCAC,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,Q,+BCRC,SAASC,IAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAAQ,SAACC,GAAD,OACjBC,YAAW,kBAAMD,EAAQ,CAAEE,KAAMJ,MAAW,QCAhD,IAUaK,EAAiBC,YAC5B,qBAD4C,uCAE5C,WAAON,GAAP,eAAAO,EAAA,sEACyBR,EAAWC,GADpC,cACQQ,EADR,yBAGSA,EAASJ,MAHlB,2CAF4C,uDASjCK,EAAeC,YAAY,CACtCC,KAAM,UACNC,aArBmB,CACnBC,MAAO,EACPC,OAAQ,QAqBRC,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMJ,OAAS,GAEjBK,UAAW,SAACD,GACVA,EAAMJ,OAAS,GAGjBM,kBAAmB,SAACF,EAAOG,GACzBH,EAAMJ,OAASO,EAAOC,UAK1BC,cAAe,SAACC,GACdA,EACGC,QAAQnB,EAAeoB,SAAS,SAACR,GAChCA,EAAMH,OAAS,aAEhBU,QAAQnB,EAAeqB,WAAW,SAACT,EAAOG,GACzCH,EAAMH,OAAS,OACfG,EAAMJ,OAASO,EAAOC,cAKvB,EAAoDZ,EAAakB,QAgBzDlB,GAhBR,EAAQO,UAAR,EAAmBE,UAAnB,EAA8BC,kBAgBtBV,EAAf,SCrEamB,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,K,QCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJa,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.8c966c48.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport styled from 'styled-components';\n\nfunction Header() {\n  return (\n    <Nav>\n        <Logo src=\"/images/logo.svg\" />\n        <NavMenu>\n          <a>\n            <img src=\"/images/home-icon.svg\" alt=\"home-icon\" />\n            <span>HOME</span>\n          </a>\n          <a>\n            <img src=\"/images/search-icon.svg\" alt=\"search-icon\" />\n            <span>SEARCH</span>\n          </a>\n          <a>\n            <img src=\"/images/watchlist-icon.svg\" alt=\"watchlist-icon\" />\n            <span>WATCHLIST</span>\n          </a>\n          <a>\n            <img src=\"/images/original-icon.svg\" alt=\"originals-icon\" />\n            <span>ORIGINALS</span>\n          </a>\n          <a>\n            <img src=\"/images/movie-icon.svg\" alt=\"movies-icon\" />\n            <span>MOVIES</span>\n          </a>\n          <a>\n            <img src=\"/images/series-icon.svg\" alt=\"series-icon\" />\n            <span>SERIES</span>\n          </a>\n        </NavMenu>\n        <UserImg src=\"https://lh3.googleusercontent.com/fife/ABSRlIp9GjxPZeaP9_2anHsvjkOMr87Q29uPaL839LoH3uB1Uh7Y2mmE6lM2p6cCVIcJNZaIgYa_fSpP853eDtx7CpEg5ynvAHQYz3GqbxNyr657KZR7Gjk1U4Lc69fkYKLdE8M3I4OUX-vZdKY8mYW2pht6afS5xm7tFnu1ZLJ0yFGNMyW9n4aA1-5gof68AC8weoZJ7KdY2HTcKTi0qInKUS4jUULC9m1BUNWEMpuMcTKhJ0WVDgL24P-nnoA_yZczl2gByuXbtH4bRMjwpCGcSxyZ5oc3uuVZtwdRBLoSZ0J8SqUX4flUAj3YwZzCHdfFxPVClV5bZF8duJiFiHNqbqF2vIKdikJrdwVli5v9rAVPaKGaegEM0VNpVSN_azmazGWTAMCW07x5FeIEUDNQBijRKHs4ZSh5oyt-rFJ9omxVNbOk32A__6yDukHO7wBTjUVHWg24OJ_nEx-fume18cX6aUI_t9irhWFSPpteJgeMUzWbDyUmvoJOenrU1gbx7Wn-JhIbhv9HQQ0Jrewj-hBGYEocIbjbzmX4rJY7IyF5KDufUQGeMSPgWSpOMar067TpGHjAgjGr0-0Jr0cHYDwn3_iv-nJxUJaTAYDDT3Quv7rbP88oN742-57D8IMhfsFSVdTDQ-_IheWvp8v2ctV0MGRJH25_z_zQembEa4CKz0KbRPPMddB6mQjE0a4yc620uJIJIvbGDRYnz6Nl5PDwB_BCPEbvz9UPWorfrcaMpQ=s64-c\"/>\n    </Nav>\n  )\n}\n\nexport default Header\n\nconst Nav = styled.nav`\n    height: 70px;\n    background: #090b13;\n    display: flex;\n    align-items: center;\n    padding: 0 36px;\n`\nconst Logo = styled.img`\n    width: 80px;\n\n`\nconst NavMenu = styled.div`\n    display: flex;\n    flex: 1;\n    margin-left: 25px;\n    align-items: center;\n    padding: 0 36px;\n\n    a {\n        display: flex;\n        align-items: center;\n        padding: 0 12px;\n        cursor: pointer;\n\n        img{\n            height: 20px;\n        }\n\n        span {\n          font-size: 13px;\n          letter-spacing: 1.42px;\n          position: relative;\n\n          &:after {\n            content: \"\";\n            height: 2px;\n            background: white;\n            position: absolute;\n            left: 0;\n            right:0;\n            bottom: -6px;\n            opacity: 0;\n            transition: all 250ms cubic-bezier(0.25, 0.46, 0.45,0.94) 0s;\n            transform: scaleX(0);\n          }\n        }\n\n        &:hover{\n          span:after{\n            transform: scaleX(1);\n            opacity: 1;\n          }\n          \n        }\n    }\n`\nconst UserImg = styled.img`\n    width: 48px;\n    height: 48px;\n    border-radius: 50%;\n`","import React from 'react';\nimport styled from 'styled-components';\n\nfunction Home() {\n    return (\n        <Container>\n\n        </Container>\n    )\n}\n\nexport default Home\n\nconst Container = styled.main`\n    min-height: calc(100vh - 70px);\n    padding: 0 calc(3.5vw + 5px);\n    position: relative;\n    \n    &:before{\n      background: url(\"/images/home-background.png\") center center / cover\n      no-repeat fixed;\n      content:\"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      z-index: -1;\n      \n    }\n`","import React from 'react';\nimport './App.css';\nimport Header from  './components/Header';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}